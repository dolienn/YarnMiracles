spring:
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: jdbc:postgresql://localhost:${DATABASE_PORT}/shop
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database : postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  mail:
    host: localhost
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          trust: "*"
        auth: true
        starttls:
          enable: true
        connectiontimout: 5000
        timeout: 3000
        writetimeout: 5000
  data:
    rest:
      detection-strategy: ANNOTATED
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
  cache:
    type: redis
  redis:
    host: localhost
    port: ${REDIS_PORT}
    password: ${REDIS_PASSWORD}
    client-type: jedis
  liquibase:
    change-log: classpath:liquibase/master-changelog.xml
  kafka:
    bootstrap-servers: localhost:29092
    group-id: kafka-group
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: pl.dolien.*
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

stripe:
  key:
    secret: ${STRIPE_SECRET_KEY}

application:
  security:
    jwt:
      secret-key: ${JWT_SECRET_KEY}
      expiration: ${JWT_EXPIRATION}
  mailing:
    frontend:
      activation-url: ${ACTIVATION_URL}

server:
  address: ${SERVER_ADDRESS}
  port: ${SERVER_PORT}

support:
  email: ${SUPPORT_EMAIL}

file:
  upload-dir: ./shop-ui/src/assets/images/products

cloudinary:
  cloud:
    name: ${CLOUDINARY_CLOUD_NAME}
  api:
    key: ${CLOUDINARY_API_KEY}
    secret: ${CLOUDINARY_API_SECRET}